#!/bin/bash

#READ THIS BEFORE CONTINUE

#Based on requirements:
#1.(PROVIDED) total time is generated by specjvm at the start of the test
#2.(PROVIDED) pause time and times called is provided in the output(run script to find+add)
#3. total memory is provided(i believe??) in the output
#4.(PROVIDED) cpu/threads used is provided at the start of the test
#5. where is heap used provided if at all??? will aid with defining the option G1HeapRegionSize

#	-> 5 Heap example output
# garbage-first heap   total 114688K, used 86856K [0x000000079a800000, 0x000000079a900380, 0x00000007c0000000)
#  region size 1024K, 4 young (4096K), 1 survivors (1024K)
# Metaspace       used 15197K, capacity 15398K, committed 15616K, reserved 1062912K
#  class space    used 1605K, capacity 1701K, committed 1792K, reserved 1048576K

# The last log I want to touch on is generated from ‘-XX:+PrintGCApplicationStoppedTime’ 
# and ‘-XX:+PrintGCApplicationConcurrentTime’. 
# These flags provide three useful data point

#TODO
#1. -XX:ParallelGCThreads=n for G1/ParallelOld   !!!! check CPU threads available to the process
#2. -XX:ConcGCThreads=n for CMS/G1   !!!! default is -XX:ParallelGCThreads divided by 4.
#3. -XX:MaxGCPauseMillis=n !!!! find suitable value(s) based on the first test run
#4. -XX:G1HeapRegionSize=n (power of 2) (1MB-32MB)

#																				0							1									2										3							4
#	________________________________|UseSerialGC| UseParallelGC | UseParallelOldGC 	| UseConcMarkSweepGC| UseG1GC
# ParallelGCThreads								|		 -			|			  +				|					+					|					+					|		+							
# G1HeapRegionSize								>		 -			>				-				>					-					>					-					>		+	
# InitiatingHeapOccupancyPercent	|		 -			|				-				|					-					|					-					|		+	


# What to run:
# Parallel / CMS / 4 ParallelGCThreads
# G1 4 ,8 ParallelGCThreads,  G1HeapRegionSize 1, 8, 16, 32

# summary: 
#					- All: NewRatio, SurvivorRatio MaxTenuringThreshold, MaxGCPauseMillis?
#					- Parallels (1-4, is 3? also): ParallelGCThreads, ConcGCThreads
#					- G1 only: G1HeapRegionSize, InitiatingHeapOccupancyPercent, G1ReservePercent		


#CHANGES FROM YOUR script
#1. added megafolder "data"
#2. added extra GCs
#3. now deletes errors/file(s) if empty, if a file is found there an error occured and no run was made
#4. JAVA_MEMORY renamed to HeapSize and not used in this script(there, but not in executed command)
#5. logs,start/end time and total run of script

#add to arrays to run
declare -a samples=("startup.helloworld" "startup.compiler.compiler" "startup.compress" "startup.crypto.aes" "startup.crypto.rsa" "startup.crypto.signverify"
			"startup.mpegaudio" "startup.scimark.fft" "startup.scimark.lu" "startup.scimark.monte_carlo" "startup.scimark.sor" 
			"startup.scimark.sparse" "startup.serial" "startup.sunflow" "startup.xml.transform" "startup.xml.validation" "compiler.compiler"
			"compress" "crypto.aes" "crypto.rsa" "crypto.signverify" "scimark.fft.large" "scimark.lu.large" "scimark.sor.large"
			"scimark.sparse.large" "scimark.fft.small" "scimark.lu.small" "scimark.sor.small" "scimark.sparse.small" "scimark.monte_carlo"
			"serial" "xml.validation"
			)
# declare -a GCs=("+UseConcMarkSweepGC" "+UseParallelOldGC" "+UseSerialGC" "+UseG1GC")
# declare -a HeapSize=("1" "8"  )
# declare -a Threads=("4" "8")

declare -a GCs=("+UseConcMarkSweepGC" "+UseParallelOldGC")
# declare -a HeapSize=("EMPTY")
# declare -a Threads=("4" "8")


#make all,error dirs if not there
mkdir -p data/
mkdir -p data/data8th
mkdir -p data/data8th/all
mkdir -p data/data8th/errors

#timestamp
echo "+++++++++++++++++++++++++++++++++++++++++" >> current_state.txt
echo -e "+\t\t\t\t\t+" >> current_state.txt
echo -e "+   " $(date +"%c") "  +" >> current_state.txt
echo -e "+\t\t\t\t\t+" >> current_state.txt
echo -e "+++++++++++++++++++++++++++++++++++++++++\n" >> current_state.txt

#measure time
SECONDS=0;

#run samples based on Heap Size
for hp in "${HeapSize[@]}"
do
	#make folder if not there
	mkdir -p "data/data8th/${hp}"

	#log the state of the run
	echo "Starting with Heap Size: ${hp}" >> current_state.txt
	echo -e "--------------------------------------\n" >>  current_state.txt

	#with different Garbage Collector
	for gc in "${GCs[@]}"
	do
		#make folder if not there
        	mkdir -p "data/data8th/${gc}"

        	#log the state of the run
		echo "Using Garbage Collector: ${gc}" >> current_state.txt
		echo "-------------------------------" >> current_state.txt
		echo -e "\nTestfile:" >> current_state.txt
		#every sample
		for s in "${samples[@]}"
		do
			#make folder if not there
        		mkdir -p "data/data8th/${s}"

        		#log the state of the run
			#echo "Testfile:" >> current_state.txt
			#echo "------------------------" >> current_state.txt
			echo -e "\t${s}" >> current_state.txt

			#command
			java "-Xmx600m" "-XX:${gc}" -verbose:gc -XX:ParallelGCThreads=8 -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -jar SPECjvm2008.jar "$s" >> "${s}_${gc}_${hp}.txt" 2> "data8th/errors/${s}_${gc}_${hp}.txt"

			#delete data/data8th/errors/file if empty
			if [ ! -s "data/data8th/errors/${s}_${gc}_${hp}.txt" ]
  			then
    				rm -f "data/data8th/errors/${s}_${gc}_${hp}.txt"
			fi

			#move to folders based on the three attributes
			cp "${s}_${gc}_${hp}.txt" "data/data8th/${s}/."
			cp "${s}_${gc}_${hp}.txt" "data/data8th/${gc}/${s}_${hp}.txt"
			cp "${s}_${gc}_${hp}.txt" "data/data8th/${hp}/${s}_${gc}.txt"
			mv "${s}_${gc}_${hp}.txt" "data/data8th/all/."
		done
		echo -e "\nFinished GC: ${gc}" >> current_state.txt
		echo -e "-------------------------------\n" >> current_state.txt
	done
	echo "Finished runs with Heap Size: ${hp}" >> current_state.txt
	echo -e "--------------------------------------\n" >> current_state.txt
done

#get seconds
duration=$SECONDS

#timestamp
echo "+++++++++++++++++++++++++++++++++++++++++" >> current_state.txt
echo -e "+\t\t\t\t\t+" >> current_state.txt
echo -e "+   " $(date +"%c") "  +" >> current_state.txt
echo "+    $(($duration / 3600)) hours and $(($duration / 60)) minutes elapsed.   +" >> current_state.txt
echo -e "+\t\t\t\t\t+" >> current_state.txt
echo -e "+++++++++++++++++++++++++++++++++++++++++\n\n" >> current_state.txt
